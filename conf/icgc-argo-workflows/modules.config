process {
    withName: 'SONG.*|SCORE.*' {
      ext.prefix = ""
      ext.transport_parallel = params.transport_parallel
      ext.transport_mem = params.transport_mem
      ext.api_download_token = params.api_token ?: params.api_download_token
      ext.api_upload_token = params.api_token ?: params.api_upload_token
      ext.song_container_version = params.song_container_version
      ext.song_container = params.song_container
      ext.score_container_version = params.score_container_version
      ext.score_container = params.score_container
    }
    withName: 'SONG_GET|SCORE_DOWNLOAD' {
      ext.song_url = params.song_url_download ?: params.song_url
      ext.score_url = params.score_url_download ?: params.score_url
    }
    withName: 'SONG_SUBMIT|SONG_MANIFEST|SONG_PUBLISH|SCORE_UPLOAD' {
      ext.song_url = params.song_url_upload ?: params.song_url
      ext.score_url = params.score_url_upload ?: params.score_url
    }
    withName: 'PAYLOAD_ALIGNMENT_H' {
        publishDir       = [
            enabled : true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/alignment/hisat2/${meta.id}"},
            pattern: "{*payload.json,out/*}",
            saveAs: { "${it}" }
        ]
    }
    withName: 'PAYLOAD_SPLICE_JUNCTION_H' {
        publishDir       = [
            enabled : true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/splice/hisat2/${meta.id}"},
            pattern: "{*payload.json,out/*}",
            saveAs: { "${it}" }
        ]
    }
    withName: 'PAYLOAD_QCMETRICS_H' {
        publishDir       = [
            enabled : true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/qc/hisat2/${meta.id}"},
            pattern: "{*payload.json,out/*}",
            saveAs: { "${it}" }
        ]
    }
    withName: 'PAYLOAD_ALIGNMENT_S' {
        publishDir       = [
            enabled : true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/alignment/star/${meta.id}"},
            pattern: "{*payload.json,out/*}",
            saveAs: { "${it}" }
        ]
    }
    withName: 'PAYLOAD_ALIGNMENT_ST' {
        publishDir       = [
            enabled : true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/alignment_tran/star/${meta.id}"},
            pattern: "{*payload.json,out/*}",
            saveAs: { "${it}" }
        ]
    }
    withName: 'PAYLOAD_SPLICE_JUNCTION_S' {
        publishDir       = [
            enabled : true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/splice/star/${meta.id}"},
            pattern: "{*payload.json,out/*}",
            saveAs: { "${it}" }
        ]
    }
    withName: 'PAYLOAD_QCMETRICS_S' {
        publishDir       = [
            enabled : true,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/qc/star/${meta.id}"},
            pattern: "{*payload.json,out/*}",
            saveAs: { "${it}" }
        ]
    }
    withName: 'PICARD_COLLECTRNASEQMETRICS_H' {
        ext.prefix = { "${meta.id}.hisat2" }
    }
    withName: 'PICARD_COLLECTRNASEQMETRICS_S' {
        ext.prefix = { "${meta.id}.star" }
    }
    withName: 'NFCORE_RNAALN:RNAALN:MERG_DUP_ST:SAMTOOLS_CONVERT' {
        ext.prefix  =  { "${meta.id}.transcriptAlign" }
    }
    withName: 'GFFREAD' {
        ext.args = '-w'
        ext.prefix = 'transcript_ref'
    }
}
